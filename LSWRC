// Given a string, find the length of the longest substring without repeating characters.

// Examples:

// Given "abcabcbb", the answer is "abc", which the length is 3.

// Given "bbbbb", the answer is "b", with the length of 1.

// Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

// Subscribe to see which companies asked this question

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        char[] strs=s.toCharArray();
        char[] strs1=new char[s.length()];
        int count=1;
        int start=-1;
        if(strs.length==0)
            return 0;
        strs1[0]=strs[0];
        int temp=1;
        for (int i=1;i<s.length();i++){
            strs1[i]=strs[i];
            boolean c=true;
            for(int j=i-1;j>start;j--){
                if(strs1[j]==strs[i]){
                    start=j;
                    
                    if(count<temp)
                        count=temp;
                    c=false;
                    temp=i-j;
                    break;
                }         
            }
            if(c){
                temp++;
            }        
        }
        if(count<temp)
            count=temp;
        return count;
    }
}
